# JSONCrack Watchdog Makefile
# Automates setup and usage of the JSONCrack watchdog system

.PHONY: help install setup start stop test clean logs status

# Default target
help:
	@echo "🚀 JSONCrack Watchdog System"
	@echo ""
	@echo "Available commands:"
	@echo "  make install    - Install Python dependencies"
	@echo "  make setup      - Initial setup (install + create files)"
	@echo "  make start      - Start the watchdog in background"
	@echo "  make stop       - Stop the watchdog"
	@echo "  make test       - Test the system with sample data"
	@echo "  make logs       - Show watchdog logs"
	@echo "  make status     - Check if watchdog is running"
	@echo "  make clean      - Clean up temporary files"
	@echo "  make add-record - Add a sample record to input file"
	@echo "  make process    - Manually process current JSON file"
	@echo ""

# Install Python dependencies
install:
	@echo "📦 Installing Python dependencies..."
	pip install -r requirements.txt
	@echo "✅ Dependencies installed successfully!"

# Initial setup
setup: install
	@echo "🔧 Setting up JSONCrack Watchdog..."
	@if [ ! -f input-records.json ]; then \
		echo "📄 Creating initial input-records.json..."; \
		cp input-records.json.example input-records.json 2>/dev/null || \
		echo '{"records": [], "metadata": {"created": "'$$(date)'", "description": "Auto-generated by Makefile"}}' > input-records.json; \
	fi
	@echo "✅ Setup completed!"
	@echo ""
	@echo "🎯 Next steps:"
	@echo "  1. Run 'make start' to start the watchdog"
	@echo "  2. Edit input-records.json to add records"
	@echo "  3. Watch JSONCrack automatically open in browser"

# Start the watchdog in background
start:
	@echo "🚀 Starting JSONCrack Watchdog..."
	@if pgrep -f "python.*json-watchdog.py" > /dev/null; then \
		echo "⚠️  Watchdog is already running!"; \
		echo "   Use 'make stop' to stop it first, or 'make status' to check"; \
	else \
		python json-watchdog.py > /dev/null 2>&1 & \
		echo "✅ Watchdog started in background"; \
		echo "📝 Logs will be written to json-watchdog.log"; \
		echo "🛑 Use 'make stop' to stop the watchdog"; \
	fi

# Stop the watchdog
stop:
	@echo "🛑 Stopping JSONCrack Watchdog..."
	@pkill -f "python.*json-watchdog.py" || echo "No watchdog process found"
	@echo "✅ Watchdog stopped"

# Test the system
test:
	@echo "🧪 Testing JSONCrack Watchdog system..."
	@echo "📂 Testing JSON generator..."
	@node json-generator.js --input-file input-records.json --no-open
	@echo "✅ Test completed successfully!"

# Show logs
logs:
	@echo "📋 Watchdog logs:"
	@if [ -f json-watchdog.log ]; then \
		tail -20 json-watchdog.log; \
	else \
		echo "No log file found. Start the watchdog first with 'make start'"; \
	fi

# Follow logs in real-time
logs-follow:
	@echo "📋 Following watchdog logs (Ctrl+C to stop):"
	@if [ -f json-watchdog.log ]; then \
		tail -f json-watchdog.log; \
	else \
		echo "No log file found. Start the watchdog first with 'make start'"; \
	fi

# Check status
status:
	@echo "📊 Watchdog Status:"
	@if pgrep -f "python.*json-watchdog.py" > /dev/null; then \
		echo "✅ Watchdog is running"; \
		echo "📄 Watching file: input-records.json"; \
		echo "📝 Log file: json-watchdog.log"; \
	else \
		echo "❌ Watchdog is not running"; \
		echo "💡 Use 'make start' to start it"; \
	fi

# Clean up temporary files
clean:
	@echo "🧹 Cleaning up temporary files..."
	@rm -f temp_input.json processed-*.json
	@echo "✅ Cleanup completed!"

# Add a sample record
add-record:
	@echo "➕ Adding sample record to input-records.json..."
	@if [ ! -f input-records.json ]; then \
		echo "❌ input-records.json not found. Run 'make setup' first."; \
		exit 1; \
	fi
	@python -c "
import json
import datetime
import uuid

# Read current data
with open('input-records.json', 'r') as f:
    data = json.load(f)

# Add new record
new_record = {
    'id': f'user_{str(uuid.uuid4())[:8]}',
    'name': f'Sample User {len(data.get(\"records\", [])) + 1}',
    'email': f'user{len(data.get(\"records\", [])) + 1}@example.com',
    'age': 25 + (len(data.get(\"records\", [])) % 20),
    'department': ['Engineering', 'Design', 'Marketing', 'Sales'][len(data.get(\"records\", [])) % 4],
    'skills': ['JavaScript', 'Python', 'React', 'Node.js'][:2 + (len(data.get(\"records\", [])) % 3)],
    'projects': [{
        'name': f'Project {len(data.get(\"records\", [])) + 1}',
        'status': ['Active', 'Completed', 'Planning'][len(data.get(\"records\", [])) % 3],
        'progress': 25 + (len(data.get(\"records\", [])) * 15) % 100
    }]
}

if 'records' not in data:
    data['records'] = []

data['records'].append(new_record)
data['metadata'] = {
    'last_updated': datetime.datetime.now().isoformat(),
    'total_records': len(data['records'])
}

# Write back to file
with open('input-records.json', 'w') as f:
    json.dump(data, f, indent=2)

print(f'✅ Added record: {new_record[\"name\"]}')
print(f'📊 Total records: {len(data[\"records\"])}')
"
	@echo "💡 The watchdog will automatically process this new record!"

# Manually process current JSON file
process:
	@echo "⚙️  Manually processing current JSON file..."
	@if [ ! -f input-records.json ]; then \
		echo "❌ input-records.json not found. Run 'make setup' first."; \
		exit 1; \
	fi
	@node json-generator.js --input-file input-records.json
	@echo "✅ Processing completed!"

# Quick demo
demo: setup start
	@echo "🎬 Starting JSONCrack Watchdog Demo..."
	@echo "⏳ Waiting 3 seconds for watchdog to initialize..."
	@sleep 3
	@echo "➕ Adding sample records..."
	@make add-record
	@sleep 2
	@make add-record
	@sleep 2
	@make add-record
	@echo ""
	@echo "🎉 Demo completed!"
	@echo "📊 Check the browser for JSONCrack visualizations"
	@echo "📝 Check logs with: make logs"

# Development mode (with verbose logging)
dev: install
	@echo "🔧 Starting in development mode..."
	@echo "📝 Verbose logging enabled"
	@python json-watchdog.py

# Install development dependencies
install-dev: install
	@echo "🔧 Installing development dependencies..."
	@npm install -g nodemon 2>/dev/null || echo "nodemon already installed"
	@echo "✅ Development dependencies installed!"

# Reset everything
reset: stop clean
	@echo "🔄 Resetting JSONCrack Watchdog system..."
	@rm -f input-records.json json-watchdog.log
	@echo "✅ Reset completed!"
	@echo "💡 Run 'make setup' to start fresh"

# Show system info
info:
	@echo "📊 JSONCrack Watchdog System Info:"
	@echo "Python version: $(shell python --version 2>&1)"
	@echo "Node.js version: $(shell node --version 2>&1)"
	@echo "Watchdog status: $(shell if pgrep -f 'python.*json-watchdog.py' > /dev/null; then echo 'Running'; else echo 'Stopped'; fi)"
	@echo "Input file: $(shell if [ -f input-records.json ]; then echo 'Exists'; else echo 'Missing'; fi)"
	@echo "Log file: $(shell if [ -f json-watchdog.log ]; then echo 'Exists'; else echo 'Missing'; fi)"

# Create example input file
create-example:
	@echo "📄 Creating example input file..."
	@cat > input-records.json.example << 'EOF'
{
  "records": [
    {
      "id": "user_001",
      "name": "John Doe",
      "email": "john@example.com",
      "age": 30,
      "department": "Engineering",
      "skills": ["JavaScript", "React", "Node.js"],
      "projects": [
        {
          "name": "E-commerce Platform",
          "status": "In Progress",
          "progress": 75
        }
      ]
    },
    {
      "id": "user_002", 
      "name": "Jane Smith",
      "email": "jane@example.com",
      "age": 28,
      "department": "Design",
      "skills": ["Figma", "Adobe Creative Suite", "Prototyping"],
      "projects": [
        {
          "name": "Mobile App Redesign",
          "status": "Completed",
          "progress": 100
        }
      ]
    }
  ],
  "metadata": {
    "created": "2024-01-15 10:30:00",
    "description": "Example user records for JSONCrack testing",
    "version": "1.0"
  }
}
EOF
	@echo "✅ Example file created: input-records.json.example"

# Backup current data
backup:
	@echo "💾 Creating backup..."
	@if [ -f input-records.json ]; then \
		cp input-records.json input-records.backup.$$(date +%Y%m%d_%H%M%S).json; \
		echo "✅ Backup created"; \
	else \
		echo "❌ No input file to backup"; \
	fi

# Restore from backup
restore:
	@echo "🔄 Restoring from backup..."
	@if ls input-records.backup.*.json >/dev/null 2>&1; then \
		LATEST_BACKUP=$$(ls input-records.backup.*.json | tail -1); \
		cp "$$LATEST_BACKUP" input-records.json; \
		echo "✅ Restored from: $$LATEST_BACKUP"; \
	else \
		echo "❌ No backup files found"; \
	fi

# Show available backups
backups:
	@echo "📦 Available backups:"
	@if ls input-records.backup.*.json >/dev/null 2>&1; then \
		ls -la input-records.backup.*.json; \
	else \
		echo "No backup files found"; \
	fi 